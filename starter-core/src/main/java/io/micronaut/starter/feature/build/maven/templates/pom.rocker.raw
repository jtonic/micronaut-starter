@import io.micronaut.starter.Project
@import io.micronaut.starter.feature.Features
@import java.util.List
@import io.micronaut.starter.util.VersionInfo
@import io.micronaut.starter.feature.build.maven.templates.dependency
@import io.micronaut.starter.build.Property

@args (
Project project,
Features features,
List<Property> properties
)

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>@project.getPackageName()</groupId>
  <artifactId>@project.getName()</artifactId>
  <version>0.1</version>

  <parent>
    <groupId>io.micronaut</groupId>
    <artifactId>micronaut-parent</artifactId>
    <version>@VersionInfo.getVersion()</version>
  </parent>

  <properties>
    <jdk.version>@VersionInfo.getTargetJdk(features.language())</jdk.version>
    <maven.compiler.target>${jdk.version}</maven.compiler.target>
    <maven.compiler.source>${jdk.version}</maven.compiler.source>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
@for (Property prop : properties) {
@if (prop.isComment()) {
    <!--@prop.getComment()-->
} else {
    <@prop.getKey()>@prop.getValue()</@prop.getKey()>
}
}
    @for ((key, item) : properties) {

    }
  </properties>

  <repositories>
    <repository>
      <id>jcenter.bintray.com</id>
      <url>https://jcenter.bintray.com</url>
    </repository>
    <!--TODO: Remove when M3/RC1 is out -->
    <repository>
      <id>jfrog-snapshots</id>
      <url>https://oss.jfrog.org/oss-snapshot-local</url>
    </repository>
  </repositories>

  <dependencies>
@dependency.template("io.micronaut", "micronaut-inject", "compile", null)
@dependency.template("io.micronaut", "micronaut-validation", "compile", null)
@if (features.contains("netty-server")) {
@dependency.template("io.micronaut", "micronaut-http-server-netty", "compile", null)
}
@if (features.contains("jetty-server")) {
@dependency.template("io.micronaut.servlet", "micronaut-http-server-jetty", "compile", null)
}
@if (features.contains("undertow-server")) {
@dependency.template("io.micronaut.servlet", "micronaut-http-server-undertow", "compile", null)
}
@if (features.contains("tomcat-server")) {
@dependency.template("io.micronaut.servlet", "micronaut-http-server-tomcat", "compile", null)
}
@if (features.contains("http-client")) {
@dependency.template("io.micronaut", "micronaut-http-client", "compile", null)
}
@if (features.language().isKotlin()) {
@dependency.template("org.jetbrains.kotlin", "kotlin-stdlib-jdk8", "compile", "${kotlinVersion}")
@dependency.template("org.jetbrains.kotlin", "kotlin-reflect", "compile", "${kotlinVersion}")
}
@if (features.contains("graalvm")) {
@dependency.template("org.graalvm.nativeimage", "svm", "provided", null)
@if (features.language().isGroovy()) {
@dependency.template("io.micronaut", "micronaut-graal", "compile", null)
}
}
@if (features.language().isGroovy()) {
@dependency.template("io.micronaut", "micronaut-runtime-groovy", "compile", null)
} else {
@dependency.template("io.micronaut", "micronaut-runtime", "compile", null)
}
@if (features.contains("grpc")) {
@dependency.template("io.micronaut.grpc", "micronaut-grpc-runtime", "compile", null)
}
@if (features.contains("picocli")) {
@dependency.template("info.picocli", "picocli", "compile", null)
@dependency.template("io.micronaut.configuration", "micronaut-picocli", "compile", null)
}
@if (features.contains("annotation-api")) {
@dependency.template("javax.annotation", "javax.annotation-api", "compile", null)
}
@if (features.contains("swagger")) {
@dependency.template("io.swagger.core.v3", "swagger-annotations", "compile", null)
}
@if (features.contains("management")) {
@dependency.template("io.micronaut", "micronaut-management", "compile", null)
}
@if (features.contains("discovery-consul") || features.contains("discovery-eureka")) {
@dependency.template("io.micronaut", "micronaut-discovery-client", "compile", null)
}
@if (features.contains("config-consul") && features.stream().noneMatch( f -> f.startsWith("discovery-"))) {
@dependency.template("io.micronaut", "micronaut-discovery-client", "compile", null)
}
@if (features.contains("kubernetes")) {
@dependency.template("io.micronaut.kubernetes", "micronaut-kubernetes-discovery-client", "compile", null)
}
@if (features.contains("micrometer")) {
@dependency.template("io.micronaut.configuration", "micronaut-micrometer-core", "compile", null)
}
@if (features.contains("micrometer-appoptics")) {
@dependency.template("io.micronaut.configuration", "micronaut-micrometer-registry-appoptics", "compile", null)
}
@if (features.contains("micrometer-atlas")) {
@dependency.template("io.micronaut.configuration", "micronaut-micrometer-registry-atlas", "compile", null)
}
@if (features.contains("micrometer-azure-monitor")) {
@dependency.template("io.micronaut.configuration", "micronaut-micrometer-registry-azure-monitor", "compile", null)
}
@if (features.contains("micrometer-cloudwatch")) {
@dependency.template("io.micronaut.configuration", "micronaut-micrometer-registry-cloudwatch", "compile", null)
}
@if (features.contains("micrometer-datadog")) {
@dependency.template("io.micronaut.configuration", "micronaut-micrometer-registry-datadog", "compile", null)
}
@if (features.contains("micrometer-dynatrace")) {
@dependency.template("io.micronaut.configuration", "micronaut-micrometer-registry-dynatrace", "compile", null)
}
@if (features.contains("micrometer-elastic")) {
@dependency.template("io.micronaut.configuration", "micronaut-micrometer-registry-elastic", "compile", null)
}
@if (features.contains("micrometer-ganglia")) {
@dependency.template("io.micronaut.configuration", "micronaut-micrometer-registry-ganglia", "compile", null)
}
@if (features.contains("micrometer-graphite")) {
@dependency.template("io.micronaut.configuration", "micronaut-micrometer-registry-graphite", "compile", null)
}
@if (features.contains("micrometer-humio")) {
@dependency.template("io.micronaut.configuration", "micronaut-micrometer-registry-humio", "compile", null)
}
@if (features.contains("micrometer-influx")) {
@dependency.template("io.micronaut.configuration", "micronaut-micrometer-registry-influx", "compile", null)
}
@if (features.contains("micrometer-jmx")) {
@dependency.template("io.micronaut.configuration", "micronaut-micrometer-registry-jmx", "compile", null)
}
@if (features.contains("micrometer-kairos")) {
@dependency.template("io.micronaut.configuration", "micronaut-micrometer-registry-kairos", "compile", null)
}
@if (features.contains("micrometer-new-relic")) {
@dependency.template("io.micronaut.configuration", "micronaut-micrometer-registry-new-relic", "compile", null)
}
@if (features.contains("micrometer-prometheus")) {
@dependency.template("io.micronaut.configuration", "micronaut-micrometer-registry-prometheus", "compile", null)
}
@if (features.contains("micrometer-signalfx")) {
@dependency.template("io.micronaut.configuration", "micronaut-micrometer-registry-signalfx", "compile", null)
}
@if (features.contains("micrometer-stackdriver")) {
@dependency.template("io.micronaut.configuration", "micronaut-micrometer-registry-stackdriver", "compile", null)
}
@if (features.contains("micrometer-statsd")) {
@dependency.template("io.micronaut.configuration", "micronaut-micrometer-registry-statsd", "compile", null)
}
@if (features.contains("micrometer-wavefront")) {
@dependency.template("io.micronaut.configuration", "micronaut-micrometer-registry-wavefront", "compile", null)
}
@if (features.contains("netflix-archaius")) {
@dependency.template("io.micronaut.configuration", "micronaut-netflix-archaius", "compile", null)
}
@if (features.contains("netflix-hystrix")) {
@dependency.template("io.micronaut.configuration", "micronaut-netflix-hystrix", "compile", null)
}
@if (features.contains("netflix-ribbon")) {
@dependency.template("io.micronaut.configuration", "micronaut-netflix-ribbon", "compile", null)
}
@if (features.contains("tracing-zipkin")) {
@dependency.template("io.micronaut", "micronaut-tracing", "compile", null)
@dependency.template("io.opentracing.brave", "brave-opentracing", "compile", null)
@dependency.template("io.zipkin.brave", "brave-instrumentation-http", "runtime", null)
@dependency.template("io.zipkin.reporter2", "zipkin-reporter", "runtime", null)
}
@if (features.contains("tracing-jaeger")) {
@dependency.template("io.micronaut", "micronaut-tracing", "compile", null)
@dependency.template("io.jaegertracing", "jaeger-thrift", "runtime", null)
}
@if (features.contains("flyway")) {
@dependency.template("io.micronaut.configuration", "micronaut-flyway", "compile", null)
}
@if (features.contains("liquibase")) {
@dependency.template("io.micronaut.configuration", "micronaut-liquibase", "compile", null)
}
@if (features.contains("jdbc-dbcp")) {
@dependency.template("io.micronaut.configuration", "micronaut-jdbc-dbcp", "compile", null)
}
@if (features.contains("jdbc-tomcat")) {
@dependency.template("io.micronaut.configuration", "micronaut-jdbc-tomcat", "compile", null)
}
@if (features.contains("jdbc-hikari")) {
@dependency.template("io.micronaut.configuration", "micronaut-jdbc-hikari", "compile", null)
}
@if (features.contains("data-jdbc")) {
@dependency.template("io.micronaut.data", "micronaut-data-jdbc", "compile", null)
}
@if (features.contains("data-jpa")) {
@dependency.template("io.micronaut.data", "micronaut-data-jpa", "compile", null)
}
@if (features.contains("hibernate-validator")) {
@dependency.template("io.micronaut.configuration", "micronaut-hibernate-validator", "compile", null)
}
@if (features.contains("hibernate-gorm")) {
@dependency.template("io.micronaut.configuration", "micronaut-hibernate-gorm", "compile", null)
}
@if (features.contains("hibernate-jpa")) {
@dependency.template("io.micronaut.configuration", "micronaut-hibernate-jpa", "compile", null)
}
@if (features.contains("mongo-reactive")) {
@dependency.template("io.micronaut.configuration", "micronaut-mongo-reactive", "compile", null)
}
@if (features.contains("mongo-gorm")) {
@dependency.template("io.micronaut.configuration", "micronaut-mongo-gorm", "compile", null)
}
@if (features.contains("neo4j-bolt")) {
@dependency.template("io.micronaut.configuration", "micronaut-neo4j-bolt", "compile", null)
}
@if (features.contains("neo4j-gorm")) {
@dependency.template("io.micronaut.configuration", "micronaut-neo4j-gorm", "compile", null)
}
@if (features.contains("security-jwt")) {
@dependency.template("io.micronaut", "micronaut-security-jwt", "compile", null)
}
@if (features.contains("security-session")) {
@dependency.template("io.micronaut", "micronaut-security-session", "compile", null)
}
@if (features.contains("kafka")) {
@dependency.template("io.micronaut.configuration", "micronaut-kafka", "compile", null)
}
@if (features.contains("rabbitmq")) {
@dependency.template("io.micronaut.configuration", "micronaut-rabbitmq", "compile", null)
}
@if (features.contains("cassandra")) {
@dependency.template("io.micronaut.configuration", "micronaut-cassandra", "compile", null)
}
@if (features.contains("elasticsearch")) {
@dependency.template("io.micronaut.configuration", "micronaut-elasticsearch", "compile", null)
}
@if (features.contains("graphql")) {
@dependency.template("io.micronaut.graphql", "micronaut-graphql", "compile", null)
}
@if (features.contains("cache-caffeine")) {
@dependency.template("io.micronaut.cache", "micronaut-cache-caffeine", "compile", null)
}
@if (features.contains("cache-ehcache")) {
@dependency.template("io.micronaut.cache", "micronaut-cache-ehcache", "compile", null)
}
@if (features.contains("cache-hazelcast")) {
@dependency.template("io.micronaut.cache", "micronaut-cache-hazelcast", "compile", null)
}
@if (features.contains("cache-infinispan")) {
@dependency.template("io.micronaut.cache", "micronaut-cache-infinispan", "compile", null)
}
@if (features.contains("postgres-reactive")) {
@dependency.template("io.micronaut.configuration", "micronaut-postgres-reactive", "compile", null)
}
@if (features.contains("redis-lettuce")) {
@dependency.template("io.micronaut.configuration", "micronaut-redis-lettuce", "compile", null)
}
@if (features.contains("file-watch-osx")) {
@dependency.template("io.micronaut", "micronaut-runtime-osx", "provided", VersionInfo.getVersion())
}
@if (features.contains("log4j2")) {
@dependency.template("org.apache.logging.log4j", "log4j-core", "compile", "2.12.1")
@dependency.template("org.apache.logging.log4j", "log4j-api", "runtime", "2.12.1")
@dependency.template("org.apache.logging.log4j", "log4j-slf4j-impl", "runtime", "2.12.1")
}
@if (features.contains("logback")) {
@dependency.template("ch.qos.logback", "logback-classic", "runtime", "1.2.3")
}
@if (features.contains("h2")) {
@dependency.template("com.h2database", "h2", "runtime", null)
}
@if (features.contains("hibernate-gorm")) {
@dependency.template("org.apache.tomcat", "tomcat-jdbc", "runtime", null)
}
@if (features.language().isKotlin()) {
@dependency.template("com.fasterxml.jackson.module", "jackson-module-kotlin", "runtime", "2.9.8")
}
@if (features.testFramework().isJunit()) {
@dependency.template("org.junit.jupiter", "junit-jupiter-api", "test", null)
@dependency.template("org.junit.jupiter", "junit-jupiter-engine", "test", null)
@dependency.template("io.micronaut.test", "micronaut-test-junit5", "test", null)
} else if (features.testFramework().isKotlinTest()) {
@dependency.template("io.micronaut.test", "micronaut-test-kotlintest", "test", null)
@dependency.template("io.mockk", "mockk", "test", "1.9.3")
@dependency.template("io.kotlintest", "kotlintest-runner-junit5", "test", "3.3.2")
} else if (features.testFramework().isSpock()) {
    <dependency>
      <groupId>org.spockframework</groupId>
      <artifactId>spock-core</artifactId>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>org.codehaus.groovy</groupId>
          <artifactId>groovy-all</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
@dependency.template("io.micronaut.test", "micronaut-test-spock", "test", null)
}
@if (features.contains("mongo-reactive")) {
@dependency.template("de.flapdoodle.embed", "de.flapdoodle.embed.mongo", "test", "2.0.1")
}
@if (features.contains("neo4j-bolt")) {
@dependency.template("org.neo4j.test", "neo4j-harness", "test", null)
}
  </dependencies>

  <build>
    <plugins>
@if (features.application() != null) {
      <plugin>
        <groupId>io.micronaut.build</groupId>
        <artifactId>micronaut-maven-plugin</artifactId>
        <!-- TODO: remove version once a new Micronaut 2.x BOM is published -->
        <version>1.0.0.RC3</version>
@if (features.contains("springloaded") || features.contains("jrebel")) {
          <configuration>
            <jvmArguments>
@if (features.contains("springloaded")) {
              <jvmArgument>-noverify</jvmArgument>
              <jvmArgument>-javaagent:${session.executionRootDirectory}/agent/springloaded-1.2.8.RELEASE.jar</jvmArgument>
}
@if (features.contains("jrebel")) {
              <jvmArgument>-agentpath:~/bin/jrebel/lib/jrebel6/lib/libjrebel64.dylib</jvmArgument>
}
            </jvmArguments>
          </configuration>
}
      </plugin>
}
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven-surefire-plugin.version}</version>
@if (features.testFramework().isJunit() || features.testFramework().isSpock()) {
        <configuration>
          <detail>true</detail>
          <includes>
            <include>%regex[.*]</include>
          </includes>
        </configuration>
} else if (features.testFramework().isKotlinTest()) {
        <configuration>
          <includes>
            <include>**/*Spec.*</include>
            <include>**/*Test.*</include>
          </includes>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.3.1</version>
          </dependency>
        </dependencies>
}
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>${maven-failsafe-plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
@if (features.language().isJava()) {
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <annotationProcessorPaths>
            <path>
              <groupId>io.micronaut</groupId>
              <artifactId>micronaut-inject-java</artifactId>
              <version>${micronaut.version}</version>
            </path>
            <path>
              <groupId>io.micronaut</groupId>
              <artifactId>micronaut-validation</artifactId>
              <version>${micronaut.version}</version>
            </path>
@if (features.contains("graalvm")) {
            <path>
              <groupId>io.micronaut</groupId>
              <artifactId>micronaut-graal</artifactId>
              <version>${micronaut.version}</version>
            </path>
}
@if (features.contains("picocli")) {
            <path>
              <groupId>io.micronaut.configuration</groupId>
              <artifactId>micronaut-picocli</artifactId>
              <version>${micronaut.picocli.version}</version>
            </path>
}
@if (features.contains("data")) {
            <path>
              <groupId>io.micronaut</groupId>
              <artifactId>micronaut-data-processor</artifactId>
              <version>${micronaut.data.version}</version>
            </path>
}
          </annotationProcessorPaths>
        </configuration>
        <executions>
          <execution>
            <id>test-compile</id>
            <goals>
              <goal>testCompile</goal>
            </goals>
            <configuration>
              <annotationProcessorPaths>
                <path>
                  <groupId>io.micronaut</groupId>
                  <artifactId>micronaut-inject-java</artifactId>
                  <version>${micronaut.version}</version>
                </path>
                <path>
                  <groupId>io.micronaut</groupId>
                  <artifactId>micronaut-validation</artifactId>
                  <version>${micronaut.version}</version>
                </path>
@if (features.contains("graalvm")) {
                <path>
                  <groupId>io.micronaut</groupId>
                  <artifactId>micronaut-graal</artifactId>
                  <version>${micronaut.version}</version>
                </path>
}
@if (features.contains("picocli")) {
                <path>
                  <groupId>io.micronaut.configuration</groupId>
                  <artifactId>micronaut-picocli</artifactId>
                  <version>${micronaut.picocli.version}</version>
                </path>
}
@if (features.contains("data")) {
                <path>
                  <groupId>io.micronaut</groupId>
                  <artifactId>micronaut-data-processor</artifactId>
                  <version>${micronaut.data.version}</version>
                </path>
}
              </annotationProcessorPaths>
            </configuration>
          </execution>
        </executions>
      </plugin>
} else if (features.language().isKotlin()) {
      <plugin>
        <artifactId>kotlin-maven-plugin</artifactId>
        <groupId>org.jetbrains.kotlin</groupId>
        <version>${kotlinVersion}</version>
        <configuration>
          <jvmTarget>${jdk.version}</jvmTarget>
          <compilerPlugins>
            <plugin>all-open</plugin>
          </compilerPlugins>
          <pluginOptions>
            <option>all-open:annotation=io.micronaut.aop.Around</option>
          </pluginOptions>
        </configuration>
        <executions>
          <execution>
            <id>kapt</id>
            <goals>
              <goal>kapt</goal>
            </goals>
            <configuration>
              <sourceDirs>
                <sourceDir>${project.basedir}/src/main/kotlin</sourceDir>
              </sourceDirs>
              <annotationProcessorPaths>

                <annotationProcessorPath>
                  <groupId>io.micronaut</groupId>
                  <artifactId>micronaut-inject-java</artifactId>
                  <version>${micronaut.version}</version>
                </annotationProcessorPath>
                <annotationProcessorPath>
                  <groupId>io.micronaut</groupId>
                  <artifactId>micronaut-validation</artifactId>
                  <version>${micronaut.version}</version>
                </annotationProcessorPath>
@if (features.contains("graalvm")) {
                <annotationProcessorPath>
                  <groupId>io.micronaut</groupId>
                  <artifactId>micronaut-graal</artifactId>
                  <version>${micronaut.version}</version>
                </annotationProcessorPath>
}
@if (features.contains("picocli")) {
                <annotationProcessorPath>
                    <groupId>io.micronaut.configuration</groupId>
                    <artifactId>micronaut-picocli</artifactId>
                    <version>${micronaut.picocli.version}</version>
                </annotationProcessorPath>
}
@if (features.contains("data")) {
                <annotationProcessorPath>
                    <groupId>io.micronaut</groupId>
                    <artifactId>micronaut-data-processor</artifactId>
                    <version>${micronaut.data.version}</version>
                </annotationProcessorPath>
}
              </annotationProcessorPaths>
            </configuration>
          </execution>
          <execution>
            <id>compile</id>
            <goals>
              <goal>compile</goal>
            </goals>
            <configuration>
              <sourceDirs>
                <sourceDir>${project.basedir}/src/main/kotlin</sourceDir>
              </sourceDirs>
            </configuration>
          </execution>
          <execution>
            <id>test-kapt</id>
            <goals>
              <goal>test-kapt</goal>
            </goals>
            <configuration>
              <sourceDirs>
                <sourceDir>${project.basedir}/src/test/kotlin</sourceDir>
              </sourceDirs>
              <annotationProcessorPaths>
                <annotationProcessorPath>
                  <groupId>io.micronaut</groupId>
                  <artifactId>micronaut-inject-java</artifactId>
                  <version>${micronaut.version}</version>
                </annotationProcessorPath>
                <annotationProcessorPath>
                  <groupId>io.micronaut</groupId>
                  <artifactId>micronaut-validation</artifactId>
                  <version>${micronaut.version}</version>
                </annotationProcessorPath>
@if (features.contains("graalvm")) {
                <annotationProcessorPath>
                  <groupId>io.micronaut</groupId>
                  <artifactId>micronaut-graal</artifactId>
                  <version>${micronaut.version}</version>
                </annotationProcessorPath>
}
@if (features.contains("picocli")) {
                <annotationProcessorPath>
                  <groupId>io.micronaut.configuration</groupId>
                  <artifactId>micronaut-picocli</artifactId>
                  <version>${micronaut.picocli.version}</version>
                </annotationProcessorPath>
}
@if (features.contains("data")) {
                <annotationProcessorPath>
                    <groupId>io.micronaut</groupId>
                    <artifactId>micronaut-data-processor</artifactId>
                    <version>${micronaut.data.version}</version>
                </annotationProcessorPath>
}
              </annotationProcessorPaths>
            </configuration>
          </execution>
          <execution>
            <id>test-compile</id>
            <goals>
              <goal>test-compile</goal>
            </goals>
            <configuration>
              <sourceDirs>
                <sourceDir>${project.basedir}/src/test/kotlin</sourceDir>
                <sourceDir>${project.basedir}/target/generated-sources/kapt/test</sourceDir>
              </sourceDirs>
            </configuration>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-allopen</artifactId>
            <version>${kotlinVersion}</version>
          </dependency>
        </dependencies>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.7.0</version>
        <configuration>
          <proc>none</proc>
          <source>${jdk.version}</source>
          <target>${jdk.version}</target>
        </configuration>
        <executions>
          <execution>
            <id>default-compile</id>
            <phase>none</phase>
          </execution>
          <execution>
            <id>default-testCompile</id>
            <phase>none</phase>
          </execution>
          <execution>
            <id>java-compile</id>
            <phase>compile</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
          <execution>
            <id>java-test-compile</id>
            <phase>test-compile</phase>
            <goals>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
}
@if (features.language().isGroovy() || features.testFramework().isSpock()) {
      <plugin>
        <groupId>org.codehaus.gmavenplus</groupId>
        <artifactId>gmavenplus-plugin</artifactId>
        <version>1.9.0</version>
        <executions>
          <execution>
            <goals>
              <goal>addSources</goal>
              <goal>addTestSources</goal>
              <goal>generateStubs</goal>
              <goal>compile</goal>
              <goal>generateTestStubs</goal>
              <goal>compileTests</goal>
              <goal>removeStubs</goal>
              <goal>removeTestStubs</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
}
@if (features.language().isGroovy()) {
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <version>1.0.0</version>
        <executions>
          <execution>
            <goals>
              <goal>set-system-properties</goal>
            </goals>
            <configuration>
              <properties>
                <property>
                  <name>groovy.target.directory</name>
                  <value>${project.build.directory}/classes</value>
                </property>
                <property>
                  <name>groovy.parameters</name>
                  <value>true</value>
                </property>
              </properties>
            </configuration>
          </execution>
        </executions>
      </plugin>
}
@if (features.contains("jrebel")) {
      <plugin>
        <groupId>org.zeroturnaround</groupId>
        <artifactId>jrebel-maven-plugin</artifactId>
        <version>1.1.8</version>
        <executions>
          <execution>
            <id>generate-rebel-xml</id>
            <phase>process-resources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
}
@if (features.contains("asciidoctor")) {
      <plugin>
        <groupId>org.asciidoctor</groupId>
        <artifactId>asciidoctor-maven-plugin</artifactId>
        <version>${asciidoctor.maven.plugin.version}</version>
        <dependencies>
          <dependency>
            <groupId>org.asciidoctor</groupId>
            <artifactId>asciidoctorj</artifactId>
            <version>${asciidoctorj.version}</version>
          </dependency>
          <dependency>
            <groupId>org.asciidoctor</groupId>
            <artifactId>asciidoctorj-diagram</artifactId>
            <version>${asciidoctorj.diagram.version}</version>
          </dependency>
        </dependencies>
        <configuration>
          <sourceDirectory>src/docs/asciidoc</sourceDirectory>
          <requires>
            <require>asciidoctor-diagram</require>
          </requires>
          <!-- Attributes common to all output formats -->
          <attributes>
            <endpoint-url>http://example.org</endpoint-url>
            <sourcedir>${project.build.sourceDirectory}</sourcedir>
            <project-version>${project.version}</project-version>
          </attributes>
        </configuration>
        <executions>
          <execution>
            <id>asciidoc-to-html</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>process-asciidoc</goal>
            </goals>
            <configuration>
              <backend>html5</backend>
              <sourceHighlighter>coderay</sourceHighlighter>
              <attributes>
                <imagesdir>./images</imagesdir>
                <toc>left</toc>
                <icons>font</icons>
                <sectanchors>true</sectanchors>
                <!-- set the idprefix to blank -->
                <idprefix/>
                <idseparator>-</idseparator>
                <docinfo1>true</docinfo1>
              </attributes>
            </configuration>
          </execution>
        </executions>
      </plugin>
}
@if (features.contains("jib")) {
      <plugin>
        <groupId>com.google.cloud.tools</groupId>
        <artifactId>jib-maven-plugin</artifactId>
        <configuration>
          <to>
            <image>gcr.io/@project.getName()/jib-image</image>
          </to>
        </configuration>
      </plugin>
}
@if (features.contains("grpc")) {
      <plugin>
        <groupId>com.github.os72</groupId>
        <artifactId>protoc-jar-maven-plugin</artifactId>
        <version>3.6.0.2</version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <addProtoSources>all</addProtoSources>
              <includeMavenTypes>direct</includeMavenTypes>
              <inputDirectories>
                <include>src/main/proto</include>
              </inputDirectories>
              <outputTargets>
                <outputTarget>
                   <type>java</type>
                </outputTarget>
                <outputTarget>
                  <type>grpc-java</type>
                  <pluginArtifact>io.grpc:protoc-gen-grpc-java:1.17.1</pluginArtifact>
                </outputTarget>
              </outputTargets>
            </configuration>
          </execution>
        </executions>
      </plugin>
}
    </plugins>
  </build>

@if (features.language().isGroovy() || features.testFramework().isSpock()) {
  <pluginRepositories>
    <pluginRepository>
      <id>bintray</id>
      <name>Groovy Bintray</name>
      <url>https://dl.bintray.com/groovy/maven</url>
      <releases>
        <updatePolicy>never</updatePolicy>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </pluginRepository>
  </pluginRepositories>
}

</project>
