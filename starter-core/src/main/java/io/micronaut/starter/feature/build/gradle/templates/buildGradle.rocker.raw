@import io.micronaut.starter.options.TestFramework
@import io.micronaut.starter.Project
@import io.micronaut.starter.feature.Features
@import io.micronaut.starter.util.VersionInfo

@args (
Project project,
Features features
)

plugins {
@if (features.contains("asciidoctor")) {
    id "org.asciidoctor.jvm.convert" version "3.1.0"
}
@if (features.language().isJava()) {
    id "net.ltgt.apt-eclipse" version "0.21"
}
@if (features.language().isKotlin()) {
    id "org.jetbrains.kotlin.jvm" version "@features.language().getVersion()"
    id "org.jetbrains.kotlin.kapt" version "@features.language().getVersion()"
    id "org.jetbrains.kotlin.plugin.allopen" version "@features.language().getVersion()"
}
@if (features.language().isGroovy() || features.testFramework().isSpock()) {
    id "groovy"
}
@if (features.contains("jrebel")) {
    id "org.zeroturnaround.gradle.jrebel" version "1.1.8"
}
@if (features.application() != null) {
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"
}
@if (features.contains("grpc")) {
    id "com.google.protobuf" version "0.8.10"
}
@if (features.contains("jib")) {
    id "com.google.cloud.tools.jib" version "2.1.0"
}
}

version "0.1"
group "@project.getPackageName()"

@if (features.contains("grpc")) {
ext {
    protocVersion="3.5.1"
    grpcVersion="1.18.0"
}
}


repositories {
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
    //TODO remove once M3/RC1 is out
    maven { url "https://oss.jfrog.org/oss-snapshot-local" }
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
@io.micronaut.starter.feature.build.gradle.templates.annotationProcessors.template(features)
@if (features.contains("graalvm")) {
    @if (!features.language().isGroovy()) {
    compileOnly platform("io.micronaut:micronaut-bom:$micronautVersion")
    }
    compileOnly "org.graalvm.nativeimage:svm"
}
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
@if (features.language().isKotlin()) {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
}
@if (features.language().isGroovy()) {
    implementation "io.micronaut:micronaut-runtime-groovy"
} else {
    implementation "io.micronaut:micronaut-runtime"
}
@if (features.contains("grpc")) {
    implementation "io.micronaut.grpc:micronaut-grpc-runtime"
}
@if (features.contains("picocli")) {
    implementation "info.picocli:picocli"
    implementation "io.micronaut.configuration:micronaut-picocli"
}
@if (features.contains("annotation-api")) {
    implementation "javax.annotation:javax.annotation-api"
}
@if (features.contains("netty-server")) {
    implementation "io.micronaut:micronaut-http-server-netty"
}
@if (features.contains("jetty-server")) {
    implementation "io.micronaut.servlet:micronaut-http-server-jetty"
}
@if (features.contains("undertow-server")) {
    implementation "io.micronaut.servlet:micronaut-http-server-undertow"
}
@if (features.contains("tomcat-server")) {
    implementation "io.micronaut.servlet:micronaut-http-server-tomcat"
}
@if (features.contains("http-client")) {
    implementation "io.micronaut:micronaut-http-client"
}
@if (features.contains("swagger")) {
    implementation "io.swagger.core.v3:swagger-annotations"
}
@if (features.contains("management")) {
    implementation "io.micronaut:micronaut-management"
}
@if (features.contains("discovery-consul") || features.contains("discovery-eureka")) {
    implementation "io.micronaut:micronaut-discovery-client"
}
@if (features.contains("config-consul") && features.stream().noneMatch( f -> f.startsWith("discovery-"))) {
    implementation "io.micronaut:micronaut-discovery-client"
}
@if (features.contains("kubernetes")) {
    implementation "io.micronaut.kubernetes:micronaut-kubernetes-discovery-client"
}
@if (features.contains("micrometer")) {
    implementation "io.micronaut.configuration:micronaut-micrometer-core"
}
@if (features.contains("micrometer-appoptics")) {
    implementation "io.micronaut.configuration:micronaut-micrometer-registry-appoptics"
}
@if (features.contains("micrometer-atlas")) {
    implementation "io.micronaut.configuration:micronaut-micrometer-registry-atlas"
}
@if (features.contains("micrometer-azure-monitor")) {
    implementation "io.micronaut.configuration:micronaut-micrometer-registry-azure-monitor"
}
@if (features.contains("micrometer-cloudwatch")) {
    implementation "io.micronaut.configuration:micronaut-micrometer-registry-cloudwatch"
}
@if (features.contains("micrometer-datadog")) {
    implementation "io.micronaut.configuration:micronaut-micrometer-registry-datadog"
}
@if (features.contains("micrometer-dynatrace")) {
    implementation "io.micronaut.configuration:micronaut-micrometer-registry-dynatrace"
}
@if (features.contains("micrometer-elastic")) {
    implementation "io.micronaut.configuration:micronaut-micrometer-registry-elastic"
}
@if (features.contains("micrometer-ganglia")) {
    implementation "io.micronaut.configuration:micronaut-micrometer-registry-ganglia"
}
@if (features.contains("micrometer-graphite")) {
    implementation "io.micronaut.configuration:micronaut-micrometer-registry-graphite"
}
@if (features.contains("micrometer-humio")) {
    implementation "io.micronaut.configuration:micronaut-micrometer-registry-humio"
}
@if (features.contains("micrometer-influx")) {
    implementation "io.micronaut.configuration:micronaut-micrometer-registry-influx"
}
@if (features.contains("micrometer-jmx")) {
    implementation "io.micronaut.configuration:micronaut-micrometer-registry-jmx"
}
@if (features.contains("micrometer-kairos")) {
    implementation "io.micronaut.configuration:micronaut-micrometer-registry-kairos"
}
@if (features.contains("micrometer-new-relic")) {
    implementation "io.micronaut.configuration:micronaut-micrometer-registry-new-relic"
}
@if (features.contains("micrometer-prometheus")) {
    implementation "io.micronaut.configuration:micronaut-micrometer-registry-prometheus"
}
@if (features.contains("micrometer-signalfx")) {
    implementation "io.micronaut.configuration:micronaut-micrometer-registry-signalfx"
}
@if (features.contains("micrometer-stackdriver")) {
    implementation "io.micronaut.configuration:micronaut-micrometer-registry-stackdriver"
}
@if (features.contains("micrometer-statsd")) {
    implementation "io.micronaut.configuration:micronaut-micrometer-registry-statsd"
}
@if (features.contains("micrometer-wavefront")) {
    implementation "io.micronaut.configuration:micronaut-micrometer-registry-wavefront"
}
@if (features.contains("netflix-archaius")) {
    implementation "io.micronaut.configuration:micronaut-netflix-archaius"
}
@if (features.contains("netflix-hystrix")) {
    implementation "io.micronaut.configuration:micronaut-netflix-hystrix"
}
@if (features.contains("netflix-ribbon")) {
    implementation "io.micronaut.configuration:micronaut-netflix-ribbon"
}
@if (features.contains("tracing-zipkin")) {
    implementation "io.micronaut:micronaut-tracing"
    implementation "io.opentracing.brave:brave-opentracing"
    runtimeOnly "io.zipkin.brave:brave-instrumentation-http"
    runtimeOnly "io.zipkin.reporter2:zipkin-reporter"
}
@if (features.contains("tracing-jaeger")) {
    implementation "io.micronaut:micronaut-tracing"
    runtimeOnly "io.jaegertracing:jaeger-thrift"
}
@if (features.contains("flyway")) {
    implementation "io.micronaut.configuration:micronaut-flyway"
}
@if (features.contains("liquibase")) {
    implementation "io.micronaut.configuration:micronaut-liquibase"
}
@if (features.contains("jdbc-dbcp")) {
    implementation "io.micronaut.configuration:micronaut-jdbc-dbcp"
}
@if (features.contains("jdbc-tomcat")) {
    implementation "io.micronaut.configuration:micronaut-jdbc-tomcat"
}
@if (features.contains("jdbc-hikari")) {
    implementation "io.micronaut.configuration:micronaut-jdbc-hikari"
}
@if (features.contains("data-jpa")) {
    implementation "io.micronaut.data:micronaut-data-jpa"
}
@if (features.contains("data-jdbc")) {
    implementation "io.micronaut.data:micronaut-data-jdbc"
}
@if (features.contains("hibernate-validator")) {
    implementation "io.micronaut.configuration:micronaut-hibernate-validator"
}
@if (features.contains("hibernate-gorm")) {
    implementation "io.micronaut.configuration:micronaut-hibernate-gorm"
}
@if (features.contains("hibernate-jpa")) {
    implementation "io.micronaut.configuration:micronaut-hibernate-jpa"
}
@if (features.contains("mongo-reactive")) {
    implementation "io.micronaut.configuration:micronaut-mongo-reactive"
}
@if (features.contains("mongo-gorm")) {
    implementation "io.micronaut.configuration:micronaut-mongo-gorm"
}
@if (features.contains("neo4j-bolt")) {
    implementation "io.micronaut.configuration:micronaut-neo4j-bolt"
}
@if (features.contains("neo4j-gorm")) {
    implementation "io.micronaut.configuration:micronaut-neo4j-gorm"
}
@if (features.contains("security-jwt")) {
    implementation "io.micronaut:micronaut-security-jwt"
}
@if (features.contains("security-session")) {
    implementation "io.micronaut:micronaut-security-session"
}
@if (features.contains("cassandra")) {
    implementation "io.micronaut.configuration:micronaut-cassandra"
}
@if (features.contains("elasticsearch")) {
    implementation "io.micronaut.configuration:micronaut-elasticsearch"
}
@if (features.contains("graphql")) {
    implementation "io.micronaut.graphql:micronaut-graphql"
}
@if (features.contains("postgres-reactive")) {
    implementation "io.micronaut.configuration:micronaut-postgres-reactive"
}
@if (features.contains("redis-lettuce")) {
    implementation "io.micronaut.configuration:micronaut-redis-lettuce"
}
@if (features.contains("cache-caffeine")) {
    implementation "io.micronaut.cache:micronaut-cache-caffeine"
}
@if (features.contains("cache-ehcache")) {
    implementation "io.micronaut.cache:micronaut-cache-ehcache"
}
@if (features.contains("cache-hazelcast")) {
    implementation "io.micronaut.cache:micronaut-cache-hazelcast"
}
@if (features.contains("cache-infinispan")) {
    implementation "io.micronaut.cache:micronaut-cache-infinispan"
}
@if (features.contains("kafka")) {
    implementation "io.micronaut.configuration:micronaut-kafka"
}
@if (features.contains("rabbitmq")) {
    implementation "io.micronaut.configuration:micronaut-rabbitmq"
}
@if (features.contains("file-watch-osx")) {
    developmentOnly "io.micronaut:micronaut-runtime-osx:@VersionInfo.getVersion()"
}
@if (features.contains("log4j2")) {
    implementation "org.apache.logging.log4j:log4j-core:2.12.1"
    runtimeOnly "org.apache.logging.log4j:log4j-api:2.12.1"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:2.12.1"
}
@if (features.contains("logback")) {
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
}
@if (features.language().isKotlin()) {
    runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8"
}
@if (features.contains("h2")) {
    runtimeOnly "com.h2database:h2"
}
@if (features.contains("hibernate-gorm")) {
    runtimeOnly "org.apache.tomcat:tomcat-jdbc"
}

@io.micronaut.starter.feature.build.gradle.templates.testFrameworks.template(features.language(), features.testFramework())
@if (features.contains("mongo-reactive")) {
    testImplementation "de.flapdoodle.embed:de.flapdoodle.embed.mongo:2.0.1"
}
@if (features.contains("neo4j-bolt")) {
    testRuntime "org.neo4j.test:neo4j-harness"
}
}

test.classpath += configurations.developmentOnly

@if (features.application() != null) {
mainClassName = "@features.application().mainClassName(project)"

}
@if (features.testFramework().isJunit() || features.testFramework().isKotlinTest()) {
// use JUnit 5 platform
test {
    useJUnitPlatform()
}

}

java {
    sourceCompatibility = JavaVersion.toVersion('@VersionInfo.getTargetJdk(features.language())')
@if (!features.language().isKotlin()) {
    targetCompatibility = JavaVersion.toVersion('@VersionInfo.getTargetJdk(features.language())')
}
}

@if (features.language().isJava()) {
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}
} else if (features.language().isKotlin()) {
allOpen {
    annotation("io.micronaut.aop.Around")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '@VersionInfo.getTargetJdk(features.language())'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '@VersionInfo.getTargetJdk(features.language())'
        javaParameters = true
    }
}
} else if (features.language().isGroovy()) {
tasks.withType(GroovyCompile) {
    groovyOptions.forkOptions.jvmArgs.add('-Dgroovy.parameters=true')
}
}


@if (features.application() != null) {
shadowJar {
    mergeServiceFiles()
}

@if (features.contains("jrebel")) {
run.dependsOn(generateRebel)
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
@if (features.contains("springloaded")) {
    jvmArgs('-noverify', '-javaagent:agent/springloaded-1.2.8.RELEASE.jar')
}
@if (features.contains("jrebel")) {
    if (project.hasProperty('rebelAgent')) {
        jvmArgs(rebelAgent)
    }
}
}
}


@if (features.contains("asciidoctor")) {
apply from: 'gradle/asciidoc.gradle'
}


@if (features.contains("jib")) {
jib.to.image = 'gcr.io/@project.getName()/jib-image'
}


@if (features.contains("grpc")) {
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}
}