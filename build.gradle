buildscript {
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        classpath "io.spring.nohttp:nohttp-gradle:0.0.4.RELEASE"
        classpath "com.github.jengelman.gradle.plugins:shadow:5.1.0"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.21.2"
        classpath "de.marcphilipp.gradle:nexus-publish-plugin:0.4.0"
        classpath 'io.github.groovylang.groovydoc:groovydoc-gradle-plugin:1.0.1'
        classpath "io.micronaut.docs:micronaut-docs-asciidoc-extensions:$micronautDocsVersion"
        classpath "io.micronaut.docs:micronaut-docs-gradle-plugins:$micronautDocsVersion"
    }
}

plugins {
    id "com.diffplug.gradle.spotless" version "3.28.1" apply false
}

repositories {
    mavenCentral()
}

version project.projectVersion

subprojects { Project subproject ->
    repositories {
        maven { url "https://repo.grails.org/grails/core" }
        maven { url "https://oss.jfrog.org/oss-snapshot-local" }
    }

    version project.projectVersion
    group "io.micronaut.starter"
    ext {
        isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")
    }

    apply plugin:"groovy"
    apply plugin: 'idea'
    apply plugin: 'checkstyle'
    apply from: rootProject.file('gradle/license.gradle')

    if (subproject.hasProperty("publish") && subproject.publish) {
        apply plugin:"java-library"
        apply from: "https://raw.githubusercontent.com/micronaut-projects/micronaut-build/v${micronautBuildVersion}/publishing.gradle"
        bintray.publish = true
    } else {
        apply plugin: "java"
    }


    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    jar {
        manifest {
            attributes('Automatic-Module-Name': "${subproject.group}.${subproject.name}".replaceAll('[^\\w\\.\\$_]', "_"))
            attributes('Implementation-Version': projectVersion)
            attributes('Implementation-Title': title)
        }
    }

    tasks.withType(Test) {
        useJUnitPlatform()
        jvmArgs '-Duser.country=US'
        jvmArgs '-Duser.language=en'
        testLogging {
            exceptionFormat = 'full'
        }
        afterSuite {
            System.out.print(".")
            System.out.flush()
        }
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        maxHeapSize = "2G"

        reports.html.enabled = !System.getenv("GITHUB_ACTIONS")
        reports.junitXml.enabled = !System.getenv("GITHUB_ACTIONS")
    }

    dependencies {
        annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
        implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
        annotationProcessor "io.micronaut:micronaut-inject-java"
        testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
        testAnnotationProcessor "io.micronaut:micronaut-inject-java"
        testImplementation("org.codehaus.groovy:groovy:$groovyVersion")
        testImplementation("org.spockframework:spock-core:$spockVersion") {
            exclude group: "org.codehaus.groovy", module: "groovy-all"
        }
    }

    checkstyle {
        toolVersion = 8.16
        configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")

        // Per submodule
        maxErrors = 0
        maxWarnings = 5

        showViolations = true
    }
    checkstyleTest.enabled = false

    idea {
        module {
            outputDir file('build/classes/java/main')
            testOutputDir file('build/classes/groovy/test')
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.compilerArgs.add('-parameters')
    }

}

apply from:"https://raw.githubusercontent.com/micronaut-projects/micronaut-docs/v${micronautDocsVersion}/gradle/docs.gradle"

Project starterCli = project('starter-cli')

starterCli.afterEvaluate {
    task generateManpageAsciiDoc(type: JavaExec) {
        dependsOn(starterCli.tasks.getByName('classes'))
        group = "Documentation"
        description = "Generate AsciiDoc manpage"
        classpath(starterCli.configurations.compile, starterCli.configurations.getByName('generateConfig'), starterCli.sourceSets.main.runtimeClasspath)
        main 'picocli.codegen.docgen.manpage.ManPageGenerator'
        args starterCli.mainClassName, "--outdir=${project.buildDir}/generated-picocli-docs", "-v", "--factory=io.micronaut.starter.cli.MicronautFactory" //, "--template-dir=src/docs/mantemplates"
    }

    task copyManPages(type: Copy) {
        dependsOn(generateManpageAsciiDoc)
        group = "Documentation"
        from file("${project.buildDir}/generated-picocli-docs")
        include "**/*.adoc"
        into file("${rootProject.buildDir.absolutePath}/generated/")
        filter { String line ->
            if (line == ':doctype: manpage' || line.startsWith('= ')) {
                return ""
            } else if (line.startsWith('==')) {
                return '=' + line
            } else {
                return line
            }
        }
    }

    publishGuide.dependsOn(copyManPages)
}